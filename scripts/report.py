#!/usr/bin/env python
"""
Generate report from the JSON file.
"""

import argparse
import json
import sys
import itertools

def build_parser(parser):
    parser.add_argument('-i', '--json-input-file', type=argparse.FileType(),
                        default='../../watch_results.txt',
                        help='file containing the JSON data generated by ansible. Default [%(default)s]')


class Reporter(object):
    def __init__(self, args):
        self.file = args.json_input_file

    def display(self):
        """
        Display details about users. Capture 'no access' as a special case.
        """
        j = json.load(self.file)
        for user in sorted(j.keys()):
            print user
            user_details = []
            for pack in sorted(j[user].keys()):
                sub = j[user][pack]
                if type(sub) == type({}):
                    user_details.append("  %s" % (pack,))
                    for k in sorted(j[user][pack].keys()):
                        subsub = j[user][pack][k]
                        if type(subsub) == type([]):
                            user_details.append("    %s" % (k,))
                            for kk in sorted(subsub):
                                if type(kk) == type({}):
                                    for kkk in sorted(kk.keys()):
                                        user_details.append("      %s: %s" % (kkk, kk[kkk]))
                                else:
                                    user_details.append("      %s" % (kk,))
                        else:
                            user_details.append("    %s: %s" % (k, j[user][pack][k]))
                elif type(sub) == type([]): 
                    user_details.append("  %s" % (pack,))
                    for ele in sub:
                        user_details.append("    %s" % (ele,))
                else:
                    user_details.append("  %s: %s" % (pack, sub))
            if self.is_empty(user_details):
                print "  No access"
            else:
                for line in user_details:
                    print line


    def is_empty(self, user_details):
        """
        Check for the case where the user has no access.
        """
        for (expected, got) in itertools.izip_longest(['  apache',
                     '  db1_hba_conf: False',
                     '  db1_mysql_user: False',
                     '  db1_pg_user: False',
                     '  residents_db: None',
                     '  tracker',
                     '    page_references',
                     '    users',
                     '  wiki'], user_details):
            if expected != got:
                return False
        return True


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    build_parser(parser)
    reporter = Reporter(parser.parse_args(sys.argv[1:]))
    reporter.display()


if __name__ == '__main__':
    main()
